#+TITLE:miRTarBase R package
#+AUTHOR: Johannes Rainer
#+email: johannes.rainer@i-med.ac.at
#+OPTIONS: ^:{}
#+PROPERTY: exports code
#+PROPERTY: session *R_mirtarbase*
#+PROPERTY: noweb yes
#+PROPERTY: results output
#+PROPERTY: tangle yes
#+STARTUP: overview
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel='stylesheet' type='text/css' href='http://thomasf.github.io/solarized-css/solarized-light.min.css' />
#+LATEX_HEADER: \usepackage[backend=bibtex,style=chem-rsc,hyperref=true]{biblatex}
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \setlength{\textwidth}{17.0cm}
#+LATEX_HEADER: \setlength{\hoffset}{-2.5cm}
#+LATEX_HEADER: \setlength{\textheight}{22cm}
#+LATEX_HEADER: \setlength{\voffset}{-1.5cm}
#+LATEX_HEADER: \addbibresource{~/Documents/Unison/bib/references.bib}
# #+LATEX_HEADER: \usepackage{verbatim}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \definecolor{lightgrey}{HTML}{F0F0F0}
#+LATEX_HEADER: \definecolor{solarizedlightbg}{HTML}{FCF4DC}
#+LATEX_HEADER: \makeatletter
# #+LATEX_HEADER: \def\verbatim@font{\scriptsize\ttfamily}
#+LATEX_HEADER: \makeatother
#+FILETAGS: :projects:work:
#+CATEGORY: miRNA
-----

* miRTarBase R package

This packages provides the miRNA-target gene interactions (MTI) from the miRTarBase.

** Create the database file

Using the code in this section we create the =SQLite= database for the package. The workflow is the following: first we have to download the XLS spreadsheet from the miRTarBase web site, which we have to open in Excel and export as tabulator delimited text file. We will then read this file into R in order format it for our requirements (i.e. rename the column names) and we store this file than into a =SQLite= database.

Assuming that the Excel file has been downloaded from http://mirtarbase.mbc.nctu.edu.tw/php/download.php and has been exported as a tabulator delimited txt file to =orig_files/txt=. Next we read this file, rename the columns and export it again as a tab delimited text file (over-writing the original one).

#+NAME: src.read.tables
#+BEGIN_SRC R :results silent :exports results
  library( RSQLite )
  MTI <- read.table( "orig_files/txt/miRTarBase_MTI.txt", sep="\t", as.is=TRUE, header=TRUE, check.names=FALSE )
  ## re-formating column names.
  CN <- tolower( colnames( MTI ) )
  CN <- gsub( CN, pattern="[(|)]", replacement="" )
  CN <- gsub( CN, pattern=" ", replacement="_", fixed=TRUE )
  colnames( MTI ) <- CN
  ## fixing the WeaK thing.
  MTI[ , "support_type" ] <- gsub( MTI[ , "support_type" ], pattern="WeaK", replacement="Weak", fixed=TRUE )
  ## exporting the file again.
  ##write.table( MTI, file="orig_files/txt/miRTarBase_MTI.txt", sep="\t", row.names=FALSE )
#+END_SRC

Next we create the database for the package. This requires a working installation of =SQLite=.

#+NAME: src.create.tables
#+BEGIN_SRC R :results silent :exports code
  con <- dbConnect( dbDriver( "SQLite" ), dbname="inst/extdata/db/mirtarbase.db" )
  if( dbExistsTable( con, "mirtarbase" ) ){
      dbRemoveTable( con, "mirtarbase" )
  }
  dbWriteTable( con, name="mirtarbase", MTI, row.names=FALSE )
  dbGetQuery( con, "create index mirna_idx on mirtarbase (mirna);" )
  dbGetQuery( con, "create index target_gene_idx on mirtarbase (target_gene);" )
  dbGetQuery( con, "create index target_gene_entrez_idx on mirtarbase (target_gene_entrez_gene_id);" )
  dbDisconnect( con )
#+END_SRC

** Development

At present (<2014-07-28>), the miRTarBase can only be exported as a XLS spread sheet. This file contains one line per MTI and publication:

+ MTI MIRT000140: online: 2 references, XLS sheet: one (one reference missing in XLS sheet).
+ MTI MIRT001206: online: 8 references, XLS sheet: 3 rows (several rows missing).
+ MTI MIRT003413: online: 4 references, XLS sheet: 2 rows (2 rows missing):
  - PMID: 18328430: experiments: Luciferase reporter assay//Microarray//Western blot; evidence: Functional MTI. Online: also Other listed as experiment.
  - PMID: 19422085: experiments: Luciferase reporter assay//Microarray//qRT-PCR//Western blot; evidence: Functional MTI. Online: also Other listed as experiment.

Thus, an MTI between the same miRNA and target gene (for the same species!) is stored in several rows in the XLS sheet. Each row seems however be related to one publication, and the field /experiments/ seems to list all experiments performed in that publication.

One question is whether the XLS sheet should be stored as-is to the database, or whether a clean relational database should be created. The benefit from the latter approach would be to allow more specific queries, e.g. all MTIs based on a certain support type.

*** The MTI class

The MTI class represents a miRNA target gene interaction. There should only be one MTI for a miRNA target gene combination, with multiple evidences and eventually multiple publications. The unique identifier for a MTI is the identifier used in the miRTarBase (e.g. /MIRT001206/).

class MTI
       L_ class Report
                 L_ experiments: lists all experiments that have been performed.
                 L_ pmid: returns the (PMID) of the report.
                 L_ supportedBy: list support type(s) (evidences).
       L_ reports: returns the Report(s) of the MTI.
       L_ experiments: returns all experiments (of the Report(s)).
       L_ pmids: returns the PMIDs of the Report(s).
       L_ supportedBy


** Changelog:

+ version 0.1.0 (2014-07-29): it's done: the first /release/. Basic functionality, not Vignette, no S4 objects (yet).
+ version 0.0.1 (2014-07-28): added database.

** TODOs

*** DONE Create the sqlite database file from the tab delimited txt file.
    CLOSED: [2014-07-28 Mon 13:59]
    - State "DONE"       from "TODO"       [2014-07-28 Mon 13:59]
*** DONE Create a class representing an interaction (?).
    CLOSED: [2014-07-31 Thu 11:00]
    - State "DONE"       from "TODO"       [2014-07-31 Thu 11:00]

What would be the benefits from this?
+ Object oriented approach (which would be helpful if not the only function of the package would be to fetch data).

Did that. That's the =MTI= object.

*** DONE Create some helper functions to retrieve information from the DB.
    CLOSED: [2014-07-28 Mon 15:20]
    - State "DONE"       from "TODO"       [2014-07-28 Mon 15:20]
*** DONE Create a txt file with all informations (version, date etc) from the miRTarBase and read it when calling mirtarbase()
    CLOSED: [2014-07-28 Mon 15:20]
    - State "DONE"       from "TODO"       [2014-07-28 Mon 15:20]
*** DONE Implement the function to get MTIs for a specified gene.
    CLOSED: [2014-07-29 Tue 10:52]
    - State "DONE"       from "TODO"       [2014-07-29 Tue 10:52]
*** TODO Create a vignette for this package.
*** CANCELED Include also the phenomiR database?
    CLOSED: [2014-07-31 Thu 10:59]
    - State "CANCELED"   from "DONE"       [2014-07-31 Thu 10:59] \\
      miRTarBase contains also other databases and will (hopefully) be updated regularily.
    - State "DONE"       from "TODO"       [2014-07-31 Thu 10:59]

This makes only sense, if the phenomiR does provide additional information.
Will not do that, since the guys from miRTarBase claim that they provide the most data and include also other databases.

*** TODO implement a central =getMti= function.

This function should take either one or more gene or miRNA IDs as input and return a list of MTI objects.
Split the data.frame by miRTarBase IDs, make one MTI for each data.frame and nrow Report classes.

*** DONE Implement functions to create MTI objects from a data.frame (and /vice versa/). [4/4]
    CLOSED: [2014-07-31 Thu 10:58]
    - State "DONE"       from "TODO"       [2014-07-31 Thu 10:58]

These should be put into /convertfunctions.R/.

+ [X] data.frame2report
+ [X] report2data.frame
+ [X] data.frame2mti
+ [X] mti2data.frame

*** DONE Implement all methods for the =Report= class [4/4].
    CLOSED: [2014-07-31 Thu 11:46]
    - State "DONE"       from "TODO"       [2014-07-31 Thu 11:46]

    - [X] show
    - [X] experiments
    - [X] supportedBy
    - [X] pmid

*** DONE Implement all methods for the =MTI= class [12/12].
    CLOSED: [2014-07-31 Thu 11:46]
    - State "DONE"       from "TODO"       [2014-07-31 Thu 11:46]

    - [X] show
    - [X] id
    - [X] reports
    - [X] experiments
    - [X] supportedBy
    - [X] pmid
    - [X] matureMirna
    - [X] mirnaSpecies
    - [X] targetGene
    - [X] targetGeneSpecies
    - [X] targetGeneEntrezid
    - [X] countReports
*** TODO Implement a function that retrieves additional miRNA annotations for a MTI.

The idea is to get the pre-miRNA or miRNA family for a given mature miRNA.
